(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{192:function(e,r,t){"use strict";t.r(r);var n=t(0),s=Object(n.a)({},function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("div",{staticClass:"content"},[e._m(0),e._v(" "),t("p",[e._v("App根节点组件提供的Context对象作为共享数据对媒介，使得子组件可以获得的到全局store。")]),e._v(" "),t("p",[e._v("App的根组件用"),t("Provider"),e._v("组件包裹后，本质上就为App提供了一个全局的属性store，相当于在整个App范围内，共享store属性。当然，"),t("Provider"),e._v("组件也可以包裹在其他组件中，在组件级的全局范围内共享store。")],1),e._v(" "),e._m(1)])},[function(){var e=this.$createElement,r=this._self._c||e;return r("h1",{attrs:{id:"react-redux源码解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-redux源码解析","aria-hidden":"true"}},[this._v("#")]),this._v(" React-Redux源码解析")])},function(){var e=this.$createElement,r=this._self._c||e;return r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[this._v("// <Provider />组件源码的核心实现\nexport function createProvider(storeKey = 'store', subKey) {\n    const subscriptionKey = subKey || `${storeKey}Subscription`\n\n    class Provider extends Component {\n        getChildContext() {\n          return { [storeKey]: this[storeKey], [subscriptionKey]: null }\n        }\n\n        constructor(props, context) {\n          super(props, context)\n          this[storeKey] = props.store;\n        }\n\n        render() {\n          return Children.only(this.props.children)\n        }\n    }\n\n    // ......\n\n    Provider.propTypes = {\n        store: storeShape.isRequired,\n        children: PropTypes.element.isRequired,\n    }\n    Provider.childContextTypes = {\n        [storeKey]: storeShape.isRequired,\n        [subscriptionKey]: subscriptionShape,\n    }\n\n    return Provider\n}\n\nexport default createProvider()\n")])])])}],!1,null,null,null);r.default=s.exports}}]);